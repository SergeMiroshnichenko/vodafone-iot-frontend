variables:
  DOCKER_DRIVER: overlay2
  CI_IMAGE: ci-${CI_PROJECT_PATH_SLUG}:${CI_PIPELINE_IID}
  IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  IMAGE_STORYBOOK: ${CI_REGISTRY_IMAGE}/storybook:${CI_COMMIT_REF_SLUG}

stages:
  - Build
  - Test
  - Package
  - Deploy

.scope: &scope
  only:
    - master
    - demo
    - tags
    - merge_requests

.docker: &docker
  image: docker:stable

.app: &app
  image: ci-${CI_PROJECT_PATH_SLUG}:${CI_PIPELINE_IID}

Build:
  <<: [*scope, *docker]
  stage: Build
  variables:
    GIT_STRATEGY: clone
    DOCKERFILE_CONTENT: |
      FROM cypress/browsers:node12.6.0-chrome75

      # We will use Chromium from a docker image
      ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true
      # Generic API endpoints
      ENV VUE_APP_API_ENDPOINT /graphql

      WORKDIR /app

      COPY ./package.json ./package-lock.json ./
      RUN npm ci

      COPY . ./
      RUN set -ex \
        && npx tsc \
        && npx tsc --project ./tests/unit \
        && npx tsc --project ./tests/visual \
        && npx tsc --project ./scripts \
        && npm run lint \
        && npm run build \
        && npm run storybook:build
    DOCKERIGNORE_CONTENT: |
      .git
      .gitlab-ci.yml
  script:
    - echo "${DOCKERFILE_CONTENT}" > Dockerfile
    - echo "${DOCKERIGNORE_CONTENT}" > .dockerignore
    - docker build --tag ${CI_IMAGE} .

Integration:
  <<: [*scope, *app]
  stage: Test
  dependencies:
    - Build
  variables:
    GIT_STRATEGY: none
  script:
    - pushd /app
    - npm run test:e2e -- --headless
    - popd
  after_script:
    - mv /app/tests/e2e/videos ./integration-videos || true
    - mv /app/tests/e2e/screenshots ./integration-screenshots || true
  artifacts:
    when: on_failure
    name: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_ID}-integration"
    paths:
      - ./integration-videos/**/*.mp4
      - ./integration-videos/*.mp4
      - ./integration-screenshots/**/*.png
      - ./integration-screenshots/*.png
    expire_in: 1 day

Unit:
  <<: [*scope, *app]
  stage: Test
  dependencies:
    - Build
  variables:
    GIT_STRATEGY: none
  script:
    - pushd /app
    - npm run test:unit -- --passWithNoTests
    - popd

Visual regression:
  <<: [*scope, *app]
  stage: Test
  dependencies:
    - Build
  variables:
    GIT_STRATEGY: none
  script:
    - |-
        google-chrome \
          --headless \
          --disable-gpu \
          --no-sandbox \
          --remote-debugging-address=127.0.0.1 \
          --remote-debugging-port=9222 \
          --user-data-dir=/data \
          --disable-dev-shm-usage \
          &

    # Start the visual tests and provide our Chromium
    - pushd /app
    - |-
        npm run test:visual \
          -- \
          --base-url "http://localhost:7007/" \
          --chromium-url "http://127.0.0.1:9222/" \
          -- \
          --passWithNoTests
    - popd

    # TODO How to handle __diff_output__ in sub dirs
    - mv /app/tests/visual/components/__image_snapshots__/__diff_output__ ./visual-regression-diffs || true

  artifacts:
    when: on_failure
    name: "${CI_PROJECT_PATH_SLUG}-${CI_JOB_ID}-visual-regression"
    paths:
      - ./visual-regression-diffs/*
    expire_in: 1 day

Create Docker image:
  <<: [*scope, *docker]
  stage: Package
  dependencies:
    - Build
  variables:
    GIT_STRATEGY: none
    NGINX_CONF: |
      server {
        listen       80;
        server_name  localhost;

        root /usr/share/nginx/html;

        location / {
          try_files /$$uri @index;
        }

        location @index {
          add_header Cache-Control "max-age=0, must-revalidate";
          try_files /index.html =404;
        }
      }
    # cant use ${CI_IMAGE}, see https://gitlab.com/gitlab-org/gitlab-runner/issues/2007
    DOCKERFILE_CONTENT: |
      FROM ci-${CI_PROJECT_PATH_SLUG}:${CI_PIPELINE_IID} AS build

      FROM nginx:1.14-alpine

      COPY ./nginx.conf /etc/nginx/conf.d/default.conf
      COPY --from=build /app/dist /usr/share/nginx/html
    DOCKERIGNORE_CONTENT: |
      *
      !./nginx.conf
      !./.htpasswd
  script:
    - echo "${DOCKERFILE_CONTENT}" > Dockerfile
    - echo "${DOCKERIGNORE_CONTENT}" > .dockerignore
    - echo "${NGINX_CONF}" > nginx.conf
    - docker build --tag ${IMAGE} .
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker push ${IMAGE}

Create Docker image for Storybook:
  <<: [*scope, *docker]
  stage: Package
  dependencies:
    - Build
  variables:
    GIT_STRATEGY: none
    NGINX_CONF: |
      server {
        listen       80;
        server_name  localhost;

        root /usr/share/nginx/html;

        auth_basic           "IoT";
        auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

        location / {
          try_files /$$uri @index;
        }

        location @index {
          add_header Cache-Control "max-age=0, must-revalidate";
          try_files /index.html =404;
        }
      }
    # cant use ${CI_IMAGE}, see https://gitlab.com/gitlab-org/gitlab-runner/issues/2007
    DOCKERFILE_CONTENT: |
      FROM ci-${CI_PROJECT_PATH_SLUG}:${CI_PIPELINE_IID} AS build

      FROM nginx:1.14-alpine

      COPY ./nginx.conf /etc/nginx/conf.d/default.conf
      COPY ./.htpasswd /etc/nginx/conf.d/.htpasswd
      COPY --from=build /app/storybook/dist /usr/share/nginx/html
    DOCKERIGNORE_CONTENT: |
      *
      !./nginx.conf
      !./.htpasswd
  script:
    - echo "${DOCKERFILE_CONTENT}" > Dockerfile
    - echo "${DOCKERIGNORE_CONTENT}" > .dockerignore
    - echo "${NGINX_CONF}" > nginx.conf
    - echo "iot:\$apr1\$7Meejk/7\$D2DmBx46b/psnz4FcJ8D40" > .htpasswd
    - docker build --tag ${IMAGE_STORYBOOK} .
    - docker login --username ${CI_REGISTRY_USER} --password ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker push ${IMAGE_STORYBOOK}

.deploy: &deploy
  stage: Deploy
  dependencies: []
  image: kroniak/ssh-client
  variables:
    GIT_STRATEGY: none
    SLACK_HOOK: |
      [[ -z $${SLACK_API} ]] && exit 0

      apk update && apk add jq curl

      mr_url="$${CI_MERGE_REQUEST_PROJECT_URL}/merge_requests/$${CI_MERGE_REQUEST_IID}"
      mr_label="$${CI_MERGE_REQUEST_PROJECT_PATH}!$${CI_MERGE_REQUEST_IID} ($${CI_COMMIT_REF_NAME})"
      mr_slack_link="<$${mr_url}|$${mr_label}>"

      project_url="$${CI_PROJECT_URL}/tree/$${CI_COMMIT_REF_SLUG}"
      project_label="$${CI_PROJECT_PATH} ($${CI_COMMIT_REF_NAME})"
      project_slack_link="<$${project_url}|$${project_label}>"

      ref_slack_link="$${CI_MERGE_REQUEST_ID:+$${mr_slack_link}}"
      ref_slack_link="$${ref_slack_link:-$${project_slack_link}}"

      deploy_url="http://$${DEPLOY_NAME}.iot.replex.io/"
      deploy_slack_link="<$${deploy_url}|$${DEPLOY_NAME}.iot.replex.io>"

      slack_message="Deployed $${ref_slack_link} at $${deploy_slack_link}!"

      slack_payload=$$(jq -n --arg text "$${slack_message}" '{ text: $$text, username: "Gitlab CI", icon_emoji: ":godmode:" }')
      curl -X POST -H "Content-Type: application/json" -d "$${slack_payload}" $${SLACK_API} || true
  before_script:
    - mkdir -p ~/.ssh
    - echo "${DEPLOY_HOST_FINGERPRINT}" > ~/.ssh/known_hosts
    - echo "${DEPLOY_SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa

Deploy to client.iot.replex.io:
  <<: *deploy
  only:
    - master
  script:
    - export DEPLOY_NAME=client
    - export DEPLOY_IMAGE=${IMAGE}
    - ssh replex@${DEPLOY_HOST} "./deploy ${DEPLOY_NAME} ${DEPLOY_IMAGE}"
    - echo "${SLACK_HOOK}" | /bin/bash

Deploy to demo.iot.replex.io:
  <<: *deploy
  only:
    - master
  script:
    - export DEPLOY_NAME=client-demo
    - export DEPLOY_IMAGE=${IMAGE}
    - ssh replex@${DEPLOY_HOST} "./deploy ${DEPLOY_NAME} ${DEPLOY_IMAGE}"
    - echo "${SLACK_HOOK}" | /bin/bash

Deploy to seewiese.iot.replex.io:
  <<: *deploy
  only:
    - master
  when: manual
  script:
    - export DEPLOY_NAME=client-seewiese
    - export DEPLOY_IMAGE=${IMAGE}
    - ssh replex@${DEPLOY_HOST} "./deploy ${DEPLOY_NAME} ${DEPLOY_IMAGE}"
    - echo "${SLACK_HOOK}" | /bin/bash

Deploy to client-stage.iot.replex.io:
  <<: *deploy
  only:
    - merge_request
  when: manual
  script:
    - export DEPLOY_NAME=client-stage
    - export DEPLOY_IMAGE=${IMAGE}
    - ssh replex@${DEPLOY_HOST} "./deploy ${DEPLOY_NAME} ${DEPLOY_IMAGE}"
    - echo "${SLACK_HOOK}" | /bin/bash

Deploy to dev.iot.replex.io:
  <<: *deploy
  only:
    - merge_request
  when: manual
  script:
    - export DEPLOY_NAME=client-dev
    - export DEPLOY_IMAGE=${IMAGE}
    - ssh replex@${DEPLOY_HOST} "./deploy ${DEPLOY_NAME} ${DEPLOY_IMAGE}"
    - echo "${SLACK_HOOK}" | /bin/bash

Deploy Storybook to storybook.iot.replex.io:
  <<: *deploy
  only:
    - master
  script:
    - export DEPLOY_NAME=storybook
    - export DEPLOY_IMAGE=${IMAGE_STORYBOOK}
    - ssh replex@${DEPLOY_HOST} "./deploy ${DEPLOY_NAME} ${DEPLOY_IMAGE}"
    - echo "${SLACK_HOOK}" | /bin/bash

Deploy Storybook to storybook-stage.iot.replex.io:
  <<: *deploy
  only:
    - merge_request
  when: manual
  script:
    - export DEPLOY_NAME=storybook-stage
    - export DEPLOY_IMAGE=${IMAGE_STORYBOOK}
    - ssh replex@${DEPLOY_HOST} "./deploy ${DEPLOY_NAME} ${DEPLOY_IMAGE}"
    - echo "${SLACK_HOOK}" | /bin/bash
